rm(job_counts, job_titles)
# Chunk 4
salaries <- salaries %>%
mutate(experience_level = as.factor(experience_level),
employment_type = as.factor(employment_type),
job_title = as.factor(job_title),
company_location = as.factor(company_location),
company_size = as.factor(company_size),
remote_ratio = as.factor(remote_ratio))
# Chunk 5
Q1 <- quantile(salaries$salary_in_usd, 0.25)
Q3 <- quantile(salaries$salary_in_usd, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
salaries <- salaries[salaries$salary_in_usd >= lower_bound & salaries$salary_in_usd <= upper_bound, ]
rm(IQR, lower_bound, Q1, Q3, upper_bound)
# Chunk 6
categorical_data <- salaries[, c("experience_level", "employment_type", "job_title", "remote_ratio","company_location", "company_size")]
dummy_cols <- dummyVars(" ~ .", data = categorical_data)
encoded_data <- predict(dummy_cols, newdata = categorical_data)
clean_salaries <- as.data.frame(cbind(salaries[, c("salary_in_usd")], encoded_data))
colnames(clean_salaries)[1] <- "salary"
rm(categorical_data, dummy_cols, encoded_data)
clean_salaries$salary_category <- cut(clean_salaries$salary,
breaks = c(-Inf, 53200, 82400, 111600, 140800,
170000, 199200, 228400, 257600,
286800, 316292),
labels = FALSE,
include.lowest = TRUE)
# Chunk 1
library(tidyverse)
library(caret)
library(xgboost)
salaries <- read.csv("salaries.csv")
# Chunk 2
salaries <- salaries %>%
filter(work_year == 2023, employee_residence == "US")
salaries <- salaries %>%
select(!(c(work_year, salary, salary_currency, employee_residence)))
# Chunk 3
job_counts <- salaries %>%
count(job_title)
job_titles <- as.vector(job_counts[which(job_counts$n > 0.01*nrow(salaries)),1])
salaries <- salaries %>%
filter(job_title %in% job_titles)
rm(job_counts, job_titles)
# Chunk 4
salaries <- salaries %>%
mutate(experience_level = as.factor(experience_level),
employment_type = as.factor(employment_type),
job_title = as.factor(job_title),
company_location = as.factor(company_location),
company_size = as.factor(company_size),
remote_ratio = as.factor(remote_ratio))
# Chunk 5
Q1 <- quantile(salaries$salary_in_usd, 0.25)
Q3 <- quantile(salaries$salary_in_usd, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
salaries <- salaries[salaries$salary_in_usd >= lower_bound & salaries$salary_in_usd <= upper_bound, ]
rm(IQR, lower_bound, Q1, Q3, upper_bound)
# Chunk 6
categorical_data <- salaries[, c("experience_level", "employment_type", "job_title", "remote_ratio","company_location", "company_size")]
dummy_cols <- dummyVars(" ~ .", data = categorical_data)
encoded_data <- predict(dummy_cols, newdata = categorical_data)
clean_salaries <- as.data.frame(cbind(salaries[, c("salary_in_usd")], encoded_data))
colnames(clean_salaries)[1] <- "salary"
rm(categorical_data, dummy_cols, encoded_data)
clean_salaries$salary_category <- cut(clean_salaries$salary,
breaks = c(-Inf, 53200, 82400, 111600, 140800,
170000, 199200, 228400, 257600,
286800, 316292),
include.lowest = TRUE)
# Chunk 1
library(tidyverse)
library(caret)
library(xgboost)
salaries <- read.csv("salaries.csv")
# Chunk 2
salaries <- salaries %>%
filter(work_year == 2023, employee_residence == "US")
salaries <- salaries %>%
select(!(c(work_year, salary, salary_currency, employee_residence)))
# Chunk 3
job_counts <- salaries %>%
count(job_title)
job_titles <- as.vector(job_counts[which(job_counts$n > 0.01*nrow(salaries)),1])
salaries <- salaries %>%
filter(job_title %in% job_titles)
rm(job_counts, job_titles)
# Chunk 4
salaries <- salaries %>%
mutate(experience_level = as.factor(experience_level),
employment_type = as.factor(employment_type),
job_title = as.factor(job_title),
company_location = as.factor(company_location),
company_size = as.factor(company_size),
remote_ratio = as.factor(remote_ratio))
# Chunk 5
Q1 <- quantile(salaries$salary_in_usd, 0.25)
Q3 <- quantile(salaries$salary_in_usd, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
salaries <- salaries[salaries$salary_in_usd >= lower_bound & salaries$salary_in_usd <= upper_bound, ]
rm(IQR, lower_bound, Q1, Q3, upper_bound)
# Chunk 6
categorical_data <- salaries[, c("experience_level", "employment_type", "job_title", "remote_ratio","company_location", "company_size")]
dummy_cols <- dummyVars(" ~ .", data = categorical_data)
encoded_data <- predict(dummy_cols, newdata = categorical_data)
clean_salaries <- as.data.frame(cbind(salaries[, c("salary_in_usd")], encoded_data))
colnames(clean_salaries)[1] <- "salary"
rm(categorical_data, dummy_cols, encoded_data)
clean_salaries$salary_category <- cut(clean_salaries$salary,
breaks = c(-Inf, 53200, 82400, 111600, 140800,
170000, 199200, 228400, 257600,
286800, 316292),
include.lowest = TRUE,
dig.lab = 10)
clean_salaries$salary <- NULL
table(clean_salaries$salary_category)
set.seed(11)
split <- createDataPartition(clean_salaries$salary_category, p = 0.7, list = FALSE)
train_data <- clean_salaries[split, ]
test_data <- clean_salaries[-split, ]
train_labels <- train_data$salary_category
test_labels <- test_data$salary_category
# train_labels <- train_labels - 1
# test_labels <- test_labels - 1
train_data <- train_data[, !(colnames(train_data) %in% c("salary_category"))]
test_data <- test_data[, !(colnames(test_data) %in% c("salary_category"))]
train_matrix <- xgb.DMatrix(data = as.matrix(train_data), label = train_labels)
test_matrix <- xgb.DMatrix(data = as.matrix(test_data), label = test_labels)
#default parameters
params <- list(booster = "gbtree",
objective = "multi:softmax",
num_class = length(levels(train_labels)),
eta=0.3,
gamma=0,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
xgbcv <- xgb.cv(params = params,
data = train_matrix,
nrounds = 100,
nfold = 5,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 20,
maximize = F)
# Chunk 1
library(tidyverse)
library(caret)
library(xgboost)
salaries <- read.csv("salaries.csv")
# Chunk 2
salaries <- salaries %>%
filter(work_year == 2023, employee_residence == "US")
salaries <- salaries %>%
select(!(c(work_year, salary, salary_currency, employee_residence)))
# Chunk 3
job_counts <- salaries %>%
count(job_title)
job_titles <- as.vector(job_counts[which(job_counts$n > 0.01*nrow(salaries)),1])
salaries <- salaries %>%
filter(job_title %in% job_titles)
rm(job_counts, job_titles)
# Chunk 4
salaries <- salaries %>%
mutate(experience_level = as.factor(experience_level),
employment_type = as.factor(employment_type),
job_title = as.factor(job_title),
company_location = as.factor(company_location),
company_size = as.factor(company_size),
remote_ratio = as.factor(remote_ratio))
# Chunk 5
Q1 <- quantile(salaries$salary_in_usd, 0.25)
Q3 <- quantile(salaries$salary_in_usd, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
salaries <- salaries[salaries$salary_in_usd >= lower_bound & salaries$salary_in_usd <= upper_bound, ]
rm(IQR, lower_bound, Q1, Q3, upper_bound)
# Chunk 6
categorical_data <- salaries[, c("experience_level", "employment_type", "job_title", "remote_ratio","company_location", "company_size")]
dummy_cols <- dummyVars(" ~ .", data = categorical_data)
encoded_data <- predict(dummy_cols, newdata = categorical_data)
clean_salaries <- as.data.frame(cbind(salaries[, c("salary_in_usd")], encoded_data))
colnames(clean_salaries)[1] <- "salary"
rm(categorical_data, dummy_cols, encoded_data)
clean_salaries$salary_category <- cut(clean_salaries$salary,
breaks = c(0, 53200, 82400, 111600, 140800,
170000, 199200, 228400, 257600,
286800, 316292),
include.lowest = TRUE,
dig.lab = 10)
View(clean_salaries)
clean_salaries$salary <- NULL
table(clean_salaries$salary_category)
set.seed(11)
split <- createDataPartition(clean_salaries$salary_category, p = 0.7, list = FALSE)
train_data <- clean_salaries[split, ]
test_data <- clean_salaries[-split, ]
train_labels <- train_data$salary_category
test_labels <- test_data$salary_category
# train_labels <- train_labels - 1
# test_labels <- test_labels - 1
train_data <- train_data[, !(colnames(train_data) %in% c("salary_category"))]
test_data <- test_data[, !(colnames(test_data) %in% c("salary_category"))]
train_matrix <- xgb.DMatrix(data = as.matrix(train_data), label = train_labels)
test_matrix <- xgb.DMatrix(data = as.matrix(test_data), label = test_labels)
#default parameters
params <- list(booster = "gbtree",
objective = "multi:softmax",
num_class = length(levels(train_labels)),
eta=0.3,
gamma=0,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
xgbcv <- xgb.cv(params = params,
data = train_matrix,
nrounds = 100,
nfold = 5,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 20,
maximize = F)
# Chunk 1
library(tidyverse)
library(caret)
library(xgboost)
salaries <- read.csv("salaries.csv")
# Chunk 2
salaries <- salaries %>%
filter(work_year == 2023, employee_residence == "US")
salaries <- salaries %>%
select(!(c(work_year, salary, salary_currency, employee_residence)))
# Chunk 3
job_counts <- salaries %>%
count(job_title)
job_titles <- as.vector(job_counts[which(job_counts$n > 0.01*nrow(salaries)),1])
salaries <- salaries %>%
filter(job_title %in% job_titles)
rm(job_counts, job_titles)
# Chunk 4
salaries <- salaries %>%
mutate(experience_level = as.factor(experience_level),
employment_type = as.factor(employment_type),
job_title = as.factor(job_title),
company_location = as.factor(company_location),
company_size = as.factor(company_size),
remote_ratio = as.factor(remote_ratio))
# Chunk 5
Q1 <- quantile(salaries$salary_in_usd, 0.25)
Q3 <- quantile(salaries$salary_in_usd, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
salaries <- salaries[salaries$salary_in_usd >= lower_bound & salaries$salary_in_usd <= upper_bound, ]
rm(IQR, lower_bound, Q1, Q3, upper_bound)
# Chunk 6
categorical_data <- salaries[, c("experience_level", "employment_type", "job_title", "remote_ratio","company_location", "company_size")]
dummy_cols <- dummyVars(" ~ .", data = categorical_data)
encoded_data <- predict(dummy_cols, newdata = categorical_data)
clean_salaries <- as.data.frame(cbind(salaries[, c("salary_in_usd")], encoded_data))
colnames(clean_salaries)[1] <- "salary"
rm(categorical_data, dummy_cols, encoded_data)
clean_salaries$salary_category <- cut(clean_salaries$salary,
breaks = 10,
include.lowest = TRUE,
dig.lab = 10)
clean_salaries$salary <- NULL
table(clean_salaries$salary_category)
# Chunk 1
library(tidyverse)
library(caret)
library(xgboost)
salaries <- read.csv("salaries.csv")
# Chunk 2
salaries <- salaries %>%
filter(work_year == 2023, employee_residence == "US")
salaries <- salaries %>%
select(!(c(work_year, salary, salary_currency, employee_residence)))
# Chunk 3
job_counts <- salaries %>%
count(job_title)
job_titles <- as.vector(job_counts[which(job_counts$n > 0.01*nrow(salaries)),1])
salaries <- salaries %>%
filter(job_title %in% job_titles)
rm(job_counts, job_titles)
# Chunk 4
salaries <- salaries %>%
mutate(experience_level = as.factor(experience_level),
employment_type = as.factor(employment_type),
job_title = as.factor(job_title),
company_location = as.factor(company_location),
company_size = as.factor(company_size),
remote_ratio = as.factor(remote_ratio))
# Chunk 5
Q1 <- quantile(salaries$salary_in_usd, 0.25)
Q3 <- quantile(salaries$salary_in_usd, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
salaries <- salaries[salaries$salary_in_usd >= lower_bound & salaries$salary_in_usd <= upper_bound, ]
rm(IQR, lower_bound, Q1, Q3, upper_bound)
# Chunk 6
categorical_data <- salaries[, c("experience_level", "employment_type", "job_title", "remote_ratio","company_location", "company_size")]
dummy_cols <- dummyVars(" ~ .", data = categorical_data)
encoded_data <- predict(dummy_cols, newdata = categorical_data)
clean_salaries <- as.data.frame(cbind(salaries[, c("salary_in_usd")], encoded_data))
colnames(clean_salaries)[1] <- "salary"
rm(categorical_data, dummy_cols, encoded_data)
# Chunk 7
clean_salaries$salary_category <- cut(clean_salaries$salary,
breaks = c(0, 53200, 82400, 111600, 140800,
170000, 199200, 228400, 257600,
286800, 316292),
include.lowest = TRUE,
dig.lab = 10)
clean_salaries$salary <- NULL
table(clean_salaries$salary_category)
# Chunk 8
set.seed(11)
split <- createDataPartition(clean_salaries$salary_category, p = 0.7, list = FALSE)
train_data <- clean_salaries[split, ]
test_data <- clean_salaries[-split, ]
train_labels <- train_data$salary_category
test_labels <- test_data$salary_category
train_data <- train_data[, !(colnames(train_data) %in% c("salary_category"))]
test_data <- test_data[, !(colnames(test_data) %in% c("salary_category"))]
# Chunk 9
train_matrix <- xgb.DMatrix(data = as.matrix(train_data), label = train_labels)
test_matrix <- xgb.DMatrix(data = as.matrix(test_data), label = test_labels)
#default parameters
params <- list(booster = "gbtree",
objective = "multi:softmax",
num_class = length(levels(train_labels)),
eta=0.3,
gamma=0,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
xgbcv <- xgb.cv(params = params,
data = train_matrix,
nrounds = 100,
nfold = 5,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 20,
maximize = F)
# Chunk 1
library(tidyverse)
library(caret)
library(xgboost)
salaries <- read.csv("salaries.csv")
# Chunk 2
salaries <- salaries %>%
filter(work_year == 2023, employee_residence == "US")
salaries <- salaries %>%
select(!(c(work_year, salary, salary_currency, employee_residence)))
# Chunk 3
job_counts <- salaries %>%
count(job_title)
job_titles <- as.vector(job_counts[which(job_counts$n > 0.01*nrow(salaries)),1])
salaries <- salaries %>%
filter(job_title %in% job_titles)
rm(job_counts, job_titles)
# Chunk 4
salaries <- salaries %>%
mutate(experience_level = as.factor(experience_level),
employment_type = as.factor(employment_type),
job_title = as.factor(job_title),
company_location = as.factor(company_location),
company_size = as.factor(company_size),
remote_ratio = as.factor(remote_ratio))
# Chunk 5
Q1 <- quantile(salaries$salary_in_usd, 0.25)
Q3 <- quantile(salaries$salary_in_usd, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
salaries <- salaries[salaries$salary_in_usd >= lower_bound & salaries$salary_in_usd <= upper_bound, ]
rm(IQR, lower_bound, Q1, Q3, upper_bound)
# Chunk 6
categorical_data <- salaries[, c("experience_level", "employment_type", "job_title", "remote_ratio","company_location", "company_size")]
dummy_cols <- dummyVars(" ~ .", data = categorical_data)
encoded_data <- predict(dummy_cols, newdata = categorical_data)
clean_salaries <- as.data.frame(cbind(salaries[, c("salary_in_usd")], encoded_data))
colnames(clean_salaries)[1] <- "salary"
rm(categorical_data, dummy_cols, encoded_data)
clean_salaries$salary_category <- cut(clean_salaries$salary,
breaks = 10,
include.lowest = TRUE,
dig.lab = 10)
table(clean_salaries$salary_category)
levels(clean_salaries$salary_category)
as.integer(clean_salaries$salary_category)
clean_salaries$salary_category <- as.integer(clean_salaries$salary_category) - 1
View(clean_salaries)
# Chunk 1
library(tidyverse)
library(caret)
library(xgboost)
salaries <- read.csv("salaries.csv")
# Chunk 2
salaries <- salaries %>%
filter(work_year == 2023, employee_residence == "US")
salaries <- salaries %>%
select(!(c(work_year, salary, salary_currency, employee_residence)))
# Chunk 3
job_counts <- salaries %>%
count(job_title)
job_titles <- as.vector(job_counts[which(job_counts$n > 0.01*nrow(salaries)),1])
salaries <- salaries %>%
filter(job_title %in% job_titles)
rm(job_counts, job_titles)
# Chunk 4
salaries <- salaries %>%
mutate(experience_level = as.factor(experience_level),
employment_type = as.factor(employment_type),
job_title = as.factor(job_title),
company_location = as.factor(company_location),
company_size = as.factor(company_size),
remote_ratio = as.factor(remote_ratio))
# Chunk 5
Q1 <- quantile(salaries$salary_in_usd, 0.25)
Q3 <- quantile(salaries$salary_in_usd, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
salaries <- salaries[salaries$salary_in_usd >= lower_bound & salaries$salary_in_usd <= upper_bound, ]
rm(IQR, lower_bound, Q1, Q3, upper_bound)
# Chunk 6
categorical_data <- salaries[, c("experience_level", "employment_type", "job_title", "remote_ratio","company_location", "company_size")]
dummy_cols <- dummyVars(" ~ .", data = categorical_data)
encoded_data <- predict(dummy_cols, newdata = categorical_data)
clean_salaries <- as.data.frame(cbind(salaries[, c("salary_in_usd")], encoded_data))
colnames(clean_salaries)[1] <- "salary"
rm(categorical_data, dummy_cols, encoded_data)
# Chunk 7
clean_salaries$salary_category <- cut(clean_salaries$salary,
breaks = 10,
include.lowest = TRUE,
dig.lab = 10)
clean_salaries$salary <- NULL
table(clean_salaries$salary_category)
levels(clean_salaries$salary_category)
clean_salaries$salary_category <- as.integer(clean_salaries$salary_category) - 1
# Chunk 8
set.seed(11)
split <- createDataPartition(clean_salaries$salary_category, p = 0.7, list = FALSE)
train_data <- clean_salaries[split, ]
test_data <- clean_salaries[-split, ]
train_labels <- train_data$salary_category
test_labels <- test_data$salary_category
train_data <- train_data[, !(colnames(train_data) %in% c("salary_category"))]
test_data <- test_data[, !(colnames(test_data) %in% c("salary_category"))]
# Chunk 9
train_matrix <- xgb.DMatrix(data = as.matrix(train_data), label = train_labels)
test_matrix <- xgb.DMatrix(data = as.matrix(test_data), label = test_labels)
#default parameters
params <- list(booster = "gbtree",
objective = "multi:softmax",
num_class = length(levels(train_labels)),
eta=0.3,
gamma=0,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
xgbcv <- xgb.cv(params = params,
data = train_matrix,
nrounds = 100,
nfold = 5,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 20,
maximize = F)
length(levels(train_labels))
levels(train_labels)
unique(train_labels)
length(unique(train_labels))
#default parameters
params <- list(booster = "gbtree",
objective = "multi:softmax",
num_class = length(unique(train_labels)),
eta=0.3,
gamma=0,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
xgbcv <- xgb.cv(params = params,
data = train_matrix,
nrounds = 100,
nfold = 5,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 20,
maximize = F)
